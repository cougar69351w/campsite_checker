#!/usr/bin/env ruby

#Set Requirements
require 'watir'
require 'headless'
require 'selenium-webdriver'
require 'mail'
require 'thread'
require 'pp'
require 'yaml'

#Using this class to close a random "Give us feedback" pop-up
class WatirProxy
  attr_reader :subject
  def initialize(browser)
    @subject = browser
  end

  def method_missing(method, *args)
    if subject.div(:id => 'acsMainInvite').exists?
       subject.link(:title => 'No, thanks').click
    end

    subject.send(method, *args)
  end
end

# Wrap our mailer bits in a class for ease of reuse
class Mailer
  def initialize(args)

    tls = false
    if args["port"] == 587
      tls = true
    end

    options = {
      :address => args["server"],
      :port => args["port"],
      :user_name => args["username"],
      :password => args["password"],
      :authentication => 'plain',
      :enable_starttls_auto => tls
    }

    Mail.defaults do
      delivery_method(:smtp, options)
    end

  end

  def send_email(to, from, subject, message)

    Mail.deliver do
      to to
      from from
      subject subject
      body message
    end
  end

end

class RecreationGovChecker

  def initialize()
    @config_data = YAML::load_file(File.join(__dir__, 'config.yaml'))

    Watir.logger.level = @config_data["applications_settings"]["watir_debug"].to_sym || :debug
    @pool_size = @config_data["applications_settings"]["pool_size"] || 7
    @browser = @config_data["applications_settings"]["browser"].to_sym || :chrome
    @send_email = @config_data["email"]["send"] || false

    if @send_email
      @mailer = Mailer.new(@config_data["email"]["settings"])
    end

    @jobs = Queue.new
    fill_job_queue
  end

  def check_all_campsites(site, url, start_date, end_date)
    result = false
    browser = WatirProxy.new(Watir::Browser.new(@browser))
    browser.goto(url)
    sleep 1
    browser.text_field(:id => "arrivalDate").set(start_date)
    sleep 1
    browser.text_field(:id => "departureDate").set(end_date)
    sleep 1
    browser.button(:id => "filter").click
    sleep 1

    if browser.link(:class => %w(book now)).exists?
      render_availability_message(true, site, start_date, end_date)
      result = true
    else
      render_availability_message(false, site, start_date, end_date)
    end

    browser.close

    return result
  end

  def render_availability_message(exists, site, start_date, end_date)
    if exists
      puts "Availability from #{start_date} to #{end_date} for #{site}"
    else
      puts "No Availability from #{start_date} to #{end_date} for #{site}"
    end
  end

  def render_email_message(site, url, start_date, end_date)
    message = <<MESSAGE_END
    There is availability at a campsite you are watching. The details are below:

    Site: #{site}
    URL: #{url}
    Check-In: #{start_date}
    Check-Out: #{end_date}
MESSAGE_END
    return message
  end

  def fill_job_queue

    @config_data["site_data"].each do |site, parameters|
      parameters["dates"]["start_dates"].each do |start_date|
        parameters["dates"]["end_dates"].each do |end_date|
          @jobs << {"name" => site, "url" => parameters["url"], "start_date" => start_date, "end_date" => end_date }
        end
      end
    end
  end

  def check_availability
    workers = (@pool_size).times.map do
      Thread.new do
        begin
          while x = @jobs.pop(true)
            if @send_email && check_all_campsites(x["name"], x["url"], x["start_date"], x["end_date"])
              @mailer.send_email(
                @config_data["email"]["settings"]["username"],
                @config_data["email"]["settings"]["username"],
                "found availability for #{x["name"]}",
                render_email_message(x["name"], x["url"], x["start_date"], x["end_date"])
              )
            end
          end
        rescue ThreadError => err
          #puts err
        end
      end
    end

    workers.map(&:join)
  end

end

RecreationGovChecker.new().check_availability
